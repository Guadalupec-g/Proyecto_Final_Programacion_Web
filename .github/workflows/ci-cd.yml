name: CI/CD – InfoMundi

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PYTHON_VERSION: "3.12"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-api        # ghcr.io/<owner>/<repo>-api

jobs:
  test:
    name: Lint & Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: infomundiF
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -proot || exit 1"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('InfoMundi/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install system client (mysql)
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r InfoMundi/requirements.txt
          pip install pytest

      - name: Wait for MySQL healthy
        run: |
          for i in {1..60}; do
            if mysqladmin ping -h 127.0.0.1 -proot --silent; then
              echo "MySQL is up"; break
            fi
            echo "Waiting MySQL ($i/60) ..."
            sleep 2
          done

      - name: Initialize schema
        run: |
          mysql -h 127.0.0.1 -uroot -proot infomundiF < InfoMundi/backend/crear_infomundi.sql

      - name: Run tests (if present)
        env:
          DATABASE_URL: mysql+pymysql://root:root@127.0.0.1:3306/infomundiF
        run: |
          if [ -d "tests" ]; then
            pytest -q
          else
            echo "No tests/ directory found – skipping pytest."
          fi

  build-and-push:
    name: Build & Push image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # ⚠️ Opcional – requiere servidor de staging con Docker y claves SSH en secrets
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script_stop: true
          script: |
            set -e
            echo "Docker login to GHCR…"
            echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            cd ${{ secrets.STAGING_PATH }}
            export API_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            docker pull "$API_IMAGE"

            export MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            export MYSQL_DATABASE=infomundiF

            docker compose -f docker-compose.yml -f docker-compose.staging.yml up -d --no-deps api
            docker image prune -f
